name: Package & Deploy Win32 app to Intune

on:
  workflow_dispatch:
    inputs:
      appName:
        description: "Display name in Intune"
        required: true
      sourceFolder:
        description: "Folder containing installer and any files (e.g., Apps/MyApp)"
        required: true
      setupFile:
        description: "Installer file name (e.g., setup.msi or setup.exe)"
        required: true
      installCmd:
        description: "Silent install command"
        required: true
      uninstallCmd:
        description: "Silent uninstall command"
        required: true
      detectionRule:
        description: "Example: MSI ProductCode={GUID} OR File=C:\\Path\\app.exe,Version>=1.2.3"
        required: true
      assignGroupId:
        description: "ObjectId of AAD group to Required-assign"
        required: true

jobs:
  build-deploy:
    runs-on: windows-latest

    env:
      TENANT_ID: ${{ secrets.INTUNE_TENANT_ID }}
      CLIENT_ID: ${{ secrets.INTUNE_CLIENT_ID }}
      CLIENT_SECRET: ${{ secrets.INTUNE_CLIENT_SECRET }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create working dirs
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path "$env:RUNNER_TEMP\prep" | Out-Null
          New-Item -ItemType Directory -Force -Path "$env:RUNNER_TEMP\out"  | Out-Null

      - name: Download Win32 Content Prep Tool
        shell: pwsh
        run: |
          # Pull latest release asset for IntuneWinAppUtil.exe
          $releases = Invoke-RestMethod -Uri "https://api.github.com/repos/microsoft/Microsoft-Win32-Content-Prep-Tool/releases/latest"
          $asset    = $releases.assets | Where-Object name -match "IntuneWinAppUtil"
          Invoke-WebRequest -Uri $asset.browser_download_url -OutFile "$env:RUNNER_TEMP\prep\IntuneWinAppUtil.exe"

      - name: Package to .intunewin
        shell: pwsh
        run: |
          $src = Join-Path $pwd ( "${{ github.event.inputs.sourceFolder }}" )
          & "$env:RUNNER_TEMP\prep\IntuneWinAppUtil.exe" `
            -c $src `
            -s "${{ github.event.inputs.setupFile }}" `
            -o "$env:RUNNER_TEMP\out" `
            -q
          Get-ChildItem "$env:RUNNER_TEMP\out" -Filter *.intunewin | Select-Object -First 1 | ForEach-Object {
            Write-Host "INTUNEWIN=$($_.FullName)"
            echo "INTUNEWIN_PATH=$($_.FullName)" | Out-File -FilePath $env:GITHUB_ENV -Append
          }

      - name: Install required PowerShell modules
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module Microsoft.Graph.Authentication -Force -Scope CurrentUser
          Install-Module Microsoft.Graph.Beta -Force -Scope CurrentUser
          Install-Module IntuneWin32App -Force -Scope CurrentUser
        # IntuneWin32App wraps packaging/upload/assignment against Graph.  [oai_citation:2‡GitHub](https://github.com/MSEndpointMgr/IntuneWin32App?utm_source=chatgpt.com)

      - name: Upload app to Intune and assign
        shell: pwsh
        env:
          APP_NAME: ${{ github.event.inputs.appName }}
          INSTALL_CMD: ${{ github.event.inputs.installCmd }}
          UNINSTALL_CMD: ${{ github.event.inputs.uninstallCmd }}
          DETECTION: ${{ github.event.inputs.detectionRule }}
          ASSIGN_GROUP: ${{ github.event.inputs.assignGroupId }}
          INTUNEWIN: ${{ env.INTUNEWIN_PATH }}
        run: |
          # Authenticate to Graph (app-only)
          $secure = ConvertTo-SecureString $env:CLIENT_SECRET -AsPlainText -Force
          $cred   = New-Object System.Management.Automation.PSCredential ($env:CLIENT_ID, $secure)
          Connect-MgGraph -TenantId $env:TENANT_ID -ClientSecretCredential $cred -NoWelcome
          Select-MgProfile -Name "beta"

          Import-Module IntuneWin32App

          # Build detection rules
          $detectionRules = @()
          if ($env:DETECTION -match '^MSI\s+ProductCode\s*=\s*{') {
            $guid = ($env:DETECTION -replace '.*{','' -replace '}.*','')
            $detectionRules += New-IntuneWin32AppDetectionRuleMSI -ProductCode "{$guid}"
          } elseif ($env:DETECTION -match '^File=') {
            $parts = $env:DETECTION -replace '^File=','' -split ','
            $path  = $parts[0]
            $ver   = ($parts | Where-Object {$_ -like 'Version*'}) -replace 'Version=',''
            $detectionRules += New-IntuneWin32AppDetectionRuleFile -Path (Split-Path $path) -FileOrFolder (Split-Path $path -Leaf) -Operator GreaterThanOrEqual -Version $ver
          } else {
            throw "Unsupported detectionRule format: $env:DETECTION"
          }

          # Create or update the Win32 LOB app
          $appParams = @{
            DisplayName             = $env:APP_NAME
            Description             = "Deployed via GitHub Actions"
            Publisher               = "Your Org"
            InstallCommandLine      = $env:INSTALL_CMD
            UninstallCommandLine    = $env:UNINSTALL_CMD
            DetectionRules          = $detectionRules
            InstallExperience       = "system"
            RestartBehavior         = "suppress"
            IntuneWinFile           = $env:INTUNEWIN
          }

          $existing = Get-IntuneWin32App | Where-Object DisplayName -eq $env:APP_NAME
          if ($existing) {
              Write-Host "App exists. Updating content…"
              Update-IntuneWin32App @appParams -Id $existing.Id -Verbose
              $appId = $existing.Id
          } else {
              Write-Host "Creating app…"
              $created = Add-IntuneWin32App @appParams -Verbose
              $appId = $created.Id
          }

          # Required assignment to AAD group
          if ($env:ASSIGN_GROUP) {
            Add-IntuneWin32AppAssignment -Id $appId -GroupId $env:ASSIGN_GROUP -Intent "required" -Verbose
          }

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: packaged-intunewin
          path: ${{ env.INTUNEWIN_PATH }}