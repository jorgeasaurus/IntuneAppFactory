name: Intune App Factory

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:

jobs:
  process_apps:
    name: Process Applications
    runs-on: windows-latest
    env:
      BUILD_SOURCESDIRECTORY: ${{ github.workspace }}
      BUILD_BINARIESDIRECTORY: ${{ github.workspace }}
      BUILD_ARTIFACTSTAGINGDIRECTORY: ${{ github.workspace }}
      PIPELINE_WORKSPACE: ${{ github.workspace }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install PowerShell Modules
        shell: pwsh
        run: |
          Write-Host "Installing required PowerShell modules..." -ForegroundColor Green
          Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
          
          # Install required modules
          $modules = @(
            'Evergreen',
            'Microsoft.Graph.Authentication',
            'Microsoft.Graph.DeviceManagement',
            'Microsoft.Graph.DeviceManagement.Actions',
            'Microsoft.Graph.Groups',
            'MSAL.PS'
          )
          
          foreach ($module in $modules) {
            Write-Host "Installing $module..." -ForegroundColor Cyan
            Install-Module -Name $module -Force -AllowClobber -Scope CurrentUser
          }

      - name: Test Templates
        shell: pwsh
        run: |
          Write-Host "Testing template files..." -ForegroundColor Green
          $result = & .\Scripts\Test-TemplatesFolder.ps1
          Write-Output $result
          if ($result -match "aborting pipeline") {
            Write-Error "Template validation failed - missing required files"
            exit 1
          }
          Write-Host "Template validation passed" -ForegroundColor Green

      - name: Test App Files
        shell: pwsh
        run: |
          Write-Host "Validating app configurations..." -ForegroundColor Green
          & .\Scripts\Test-AppFiles.ps1
          
          # Move AppsProcessList.json to expected location
          if (Test-Path ".\AppsProcessList.json") {
            New-Item -ItemType Directory -Path ".\AppsProcessList" -Force | Out-Null
            Move-Item -Path ".\AppsProcessList.json" -Destination ".\AppsProcessList\AppsProcessList.json" -Force
          }
          
      - name: Test and Check Applications
        shell: pwsh
        env:
          TENANT_ID: ${{ secrets.TENANT_ID }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
        run: |
          Write-Host "Checking for new application versions..." -ForegroundColor Green
          
          # Test app configurations and check for new versions
          .\Scripts\Test-AppList.ps1 `
            -TenantID $env:TENANT_ID `
            -ClientID $env:CLIENT_ID `
            -ClientSecret $env:CLIENT_SECRET `
            -Verbose
          
          # Check if any apps need processing
          if (Test-Path ".\AppsDownloadList.json") {
            $apps = Get-Content ".\AppsDownloadList.json" | ConvertFrom-Json
            if ($apps.Count -eq 0) {
              Write-Host "No applications need updating" -ForegroundColor Yellow
              exit 0
            }
            Write-Host "Found $($apps.Count) applications to process" -ForegroundColor Green
          } else {
            Write-Host "No applications to process" -ForegroundColor Yellow
            exit 0
          }

      - name: Download Applications
        shell: pwsh
        run: |
          if (Test-Path ".\AppsDownloadList.json") {
            Write-Host "Downloading application installers..." -ForegroundColor Green
            
            # Move AppsDownloadList.json to expected location
            if (-not (Test-Path ".\AppsDownloadList")) {
              New-Item -ItemType Directory -Path ".\AppsDownloadList" -Force | Out-Null
            }
            Copy-Item -Path ".\AppsDownloadList.json" -Destination ".\AppsDownloadList\AppsDownloadList.json" -Force
            
            # Run the download script once (it processes all apps)
            .\Scripts\Save-Installer.ps1
          }

      - name: Prepare Application Packages
        shell: pwsh
        run: |
          Write-Host "Checking for files to prepare packages..." -ForegroundColor Green
          Write-Host "Current directory contents:" -ForegroundColor Gray
          Get-ChildItem -Name "*.json" | ForEach-Object { Write-Host "  - $_" -ForegroundColor Gray }
          
          # The Save-Installer script should create AppsPrepareList.json
          if (Test-Path ".\AppsPrepareList.json") {
            Write-Host "Found AppsPrepareList.json, preparing application packages..." -ForegroundColor Green
            
            # Move AppsPrepareList.json to expected location
            if (-not (Test-Path ".\AppsPrepareList")) {
              New-Item -ItemType Directory -Path ".\AppsPrepareList" -Force | Out-Null
            }
            Move-Item -Path ".\AppsPrepareList.json" -Destination ".\AppsPrepareList\AppsPrepareList.json" -Force
            
            # Run the prepare script with error handling
            try {
              Write-Host "Running Prepare-AppPackageFolder.ps1..." -ForegroundColor Cyan
              .\Scripts\Prepare-AppPackageFolder.ps1
              Write-Host "Prepare-AppPackageFolder.ps1 completed" -ForegroundColor Green
            } catch {
              Write-Error "Prepare-AppPackageFolder.ps1 failed: $_"
              Write-Host "Error details: $($_.Exception.Message)" -ForegroundColor Red
              exit 1
            }
          } else {
            Write-Host "AppsPrepareList.json not found. Using AppsDownloadList.json as fallback..." -ForegroundColor Yellow
            
            if (Test-Path ".\AppsDownloadList.json") {
              # Create AppsPrepareList.json from AppsDownloadList.json
              $downloadList = Get-Content ".\AppsDownloadList.json" | ConvertFrom-Json
              $downloadList | ConvertTo-Json -Depth 10 | Out-File -FilePath ".\AppsPrepareList.json" -Encoding UTF8
              
              # Move to expected location
              if (-not (Test-Path ".\AppsPrepareList")) {
                New-Item -ItemType Directory -Path ".\AppsPrepareList" -Force | Out-Null
              }
              Move-Item -Path ".\AppsPrepareList.json" -Destination ".\AppsPrepareList\AppsPrepareList.json" -Force
              
              # Run the prepare script with error handling
              try {
                Write-Host "Running Prepare-AppPackageFolder.ps1 (fallback)..." -ForegroundColor Cyan
                .\Scripts\Prepare-AppPackageFolder.ps1
                Write-Host "Prepare-AppPackageFolder.ps1 completed" -ForegroundColor Green
              } catch {
                Write-Error "Prepare-AppPackageFolder.ps1 failed: $_"
                Write-Host "Error details: $($_.Exception.Message)" -ForegroundColor Red
                exit 1
              }
            } else {
              Write-Error "Neither AppsPrepareList.json nor AppsDownloadList.json found"
              exit 1
            }
          }
          
          # Check results
          Write-Host "`nChecking preparation results:" -ForegroundColor Green
          Write-Host "Files in current directory after preparation:" -ForegroundColor Gray
          Get-ChildItem -Name "*.json" | ForEach-Object { Write-Host "  - $_" -ForegroundColor Gray }
          
          Write-Host "Checking specific directories:" -ForegroundColor Gray
          if (Test-Path ".\Publish") {
            Write-Host "  - Publish folder exists" -ForegroundColor Green
            Get-ChildItem -Path ".\Publish" -Recurse -Name | ForEach-Object { Write-Host "    - $_" -ForegroundColor Gray }
          } else {
            Write-Host "  - Publish folder does not exist" -ForegroundColor Red
          }
          
          if (Test-Path ".\AppsPublishList.json") {
            Write-Host "✅ AppsPublishList.json created successfully" -ForegroundColor Green
            $publishApps = Get-Content ".\AppsPublishList.json" | ConvertFrom-Json
            Write-Host "Found $($publishApps.Count) apps ready for publishing:" -ForegroundColor Green
            foreach ($app in $publishApps) {
              Write-Host "  - $($app.IntuneAppName)" -ForegroundColor Gray
            }
            
            # Move AppsPublishList.json to the location expected by New-Win32App-GraphSDK.ps1
            Write-Host "Moving AppsPublishList.json to expected location..." -ForegroundColor Cyan
            if (-not (Test-Path ".\AppsPublishList")) {
              New-Item -ItemType Directory -Path ".\AppsPublishList" -Force | Out-Null
            }
            Move-Item -Path ".\AppsPublishList.json" -Destination ".\AppsPublishList\AppsPublishList.json" -Force
            Write-Host "AppsPublishList.json moved to .\AppsPublishList\AppsPublishList.json" -ForegroundColor Green
          } else {
            Write-Host "⚠️ AppsPublishList.json was not created" -ForegroundColor Red
            Write-Host "Expected location: $PWD\AppsPublishList.json" -ForegroundColor Gray
          }

      - name: Publish to Intune
        shell: pwsh
        env:
          TENANT_ID: ${{ secrets.TENANT_ID }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          WORKSPACE_ID: ${{ secrets.LOG_ANALYTICS_WORKSPACE_ID }}
          SHARED_KEY: ${{ secrets.LOG_ANALYTICS_SHARED_KEY }}
        run: |
          if (Test-Path ".\AppsPublishList.json") {
            Write-Host "Publishing applications to Intune..." -ForegroundColor Green
            
            # Use the Graph SDK version of the script
            .\Scripts\New-Win32App-GraphSDK.ps1 `
              -TenantID $env:TENANT_ID `
              -ClientID $env:CLIENT_ID `
              -ClientSecret $env:CLIENT_SECRET `
              -WorkspaceID $(if ($env:WORKSPACE_ID) { $env:WORKSPACE_ID } else { "dummy" }) `
              -SharedKey $(if ($env:SHARED_KEY) { $env:SHARED_KEY } else { "dummy" }) `
              -Verbose
          }

      - name: Assign Applications
        shell: pwsh
        env:
          TENANT_ID: ${{ secrets.TENANT_ID }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          WORKSPACE_ID: ${{ secrets.LOG_ANALYTICS_WORKSPACE_ID }}
          SHARED_KEY: ${{ secrets.LOG_ANALYTICS_SHARED_KEY }}
        run: |
          if (Test-Path ".\AppsAssignmentList.json") {
            Write-Host "Assigning applications..." -ForegroundColor Green
            
            # Use the Graph SDK version of the script
            .\Scripts\New-AppAssignment-GraphSDK.ps1 `
              -TenantID $env:TENANT_ID `
              -ClientID $env:CLIENT_ID `
              -ClientSecret $env:CLIENT_SECRET `
              -WorkspaceID $(if ($env:WORKSPACE_ID) { $env:WORKSPACE_ID } else { "dummy" }) `
              -SharedKey $(if ($env:SHARED_KEY) { $env:SHARED_KEY } else { "dummy" }) `
              -Verbose
          }

      - name: Cleanup
        if: always()
        shell: pwsh
        run: |
          Write-Host "Cleaning up temporary files..." -ForegroundColor Green
          
          # Remove temporary files
          $tempFiles = @(
            ".\AppsDownloadList.json",
            ".\AppsPublishList.json", 
            ".\AppsAssignmentList.json",
            ".\AppsProcessList.json"
          )
          
          foreach ($file in $tempFiles) {
            if (Test-Path $file) {
              Remove-Item $file -Force
              Write-Host "Removed: $file" -ForegroundColor Gray
            }
          }
          
          # Clean up download folders
          if (Test-Path ".\Downloads") {
            Remove-Item ".\Downloads" -Recurse -Force
            Write-Host "Removed Downloads folder" -ForegroundColor Gray
          }
          
          if (Test-Path ".\Output") {
            Remove-Item ".\Output" -Recurse -Force  
            Write-Host "Removed Output folder" -ForegroundColor Gray
          }